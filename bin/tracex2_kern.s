
./ebpf-samples/all/tracex2_kern.o:	file format elf64-bpf

Disassembly of section kprobe/kfree_skb:

0000000000000000 <bpf_prog2>:
       0:	b7 02 00 00 00 00 00 00	r2 = 0
       1:	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 8) = r2
       2:	b7 02 00 00 01 00 00 00	r2 = 1
       3:	7b 2a f0 ff 00 00 00 00	*(u64 *)(r10 - 16) = r2
       4:	79 13 98 00 00 00 00 00	r3 = *(u64 *)(r1 + 152)
       5:	bf a6 00 00 00 00 00 00	r6 = r10
       6:	07 06 00 00 f8 ff ff ff	r6 += -8
       7:	bf 61 00 00 00 00 00 00	r1 = r6
       8:	b7 02 00 00 08 00 00 00	r2 = 8
       9:	85 00 00 00 04 00 00 00	call 4
      10:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      12:	bf 62 00 00 00 00 00 00	r2 = r6
      13:	85 00 00 00 01 00 00 00	call 1
      14:	15 00 04 00 00 00 00 00	if r0 == 0 goto +4 <LBB0_2>
      15:	79 01 00 00 00 00 00 00	r1 = *(u64 *)(r0 + 0)
      16:	07 01 00 00 01 00 00 00	r1 += 1
      17:	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0) = r1
      18:	05 00 08 00 00 00 00 00	goto +8 <LBB0_3>

0000000000000098 <LBB0_2>:
      19:	bf a2 00 00 00 00 00 00	r2 = r10
      20:	07 02 00 00 f8 ff ff ff	r2 += -8
      21:	bf a3 00 00 00 00 00 00	r3 = r10
      22:	07 03 00 00 f0 ff ff ff	r3 += -16
      23:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      25:	b7 04 00 00 00 00 00 00	r4 = 0
      26:	85 00 00 00 02 00 00 00	call 2

00000000000000d8 <LBB0_3>:
      27:	b7 00 00 00 00 00 00 00	r0 = 0
      28:	95 00 00 00 00 00 00 00	exit

Disassembly of section kprobe/sys_write:

0000000000000000 <bpf_prog3>:
       0:	79 12 60 00 00 00 00 00	r2 = *(u64 *)(r1 + 96)
       1:	b7 04 00 00 01 00 00 00	r4 = 1
       2:	7b 4a f8 ff 00 00 00 00	*(u64 *)(r10 - 8) = r4
       3:	bf 23 00 00 00 00 00 00	r3 = r2
       4:	77 03 00 00 20 00 00 00	r3 >>= 32
       5:	15 03 23 00 00 00 00 00	if r3 == 0 goto +35 <LBB1_10>
       6:	b7 02 00 00 01 00 00 00	r2 = 1
       7:	25 03 01 00 ff ff 00 00	if r3 > 65535 goto +1 <LBB1_3>
       8:	b7 02 00 00 00 00 00 00	r2 = 0

0000000000000048 <LBB1_3>:
       9:	67 02 00 00 04 00 00 00	r2 <<= 4
      10:	7f 23 00 00 00 00 00 00	r3 >>= r2
      11:	67 03 00 00 20 00 00 00	r3 <<= 32
      12:	77 03 00 00 20 00 00 00	r3 >>= 32
      13:	b7 01 00 00 01 00 00 00	r1 = 1
      14:	25 03 01 00 ff 00 00 00	if r3 > 255 goto +1 <LBB1_5>
      15:	b7 01 00 00 00 00 00 00	r1 = 0

0000000000000080 <LBB1_5>:
      16:	67 01 00 00 03 00 00 00	r1 <<= 3
      17:	7f 13 00 00 00 00 00 00	r3 >>= r1
      18:	4f 21 00 00 00 00 00 00	r1 |= r2
      19:	67 03 00 00 20 00 00 00	r3 <<= 32
      20:	77 03 00 00 20 00 00 00	r3 >>= 32
      21:	b7 02 00 00 01 00 00 00	r2 = 1
      22:	25 03 01 00 0f 00 00 00	if r3 > 15 goto +1 <LBB1_7>
      23:	b7 02 00 00 00 00 00 00	r2 = 0

00000000000000c0 <LBB1_7>:
      24:	67 02 00 00 02 00 00 00	r2 <<= 2
      25:	4f 21 00 00 00 00 00 00	r1 |= r2
      26:	7f 23 00 00 00 00 00 00	r3 >>= r2
      27:	67 03 00 00 20 00 00 00	r3 <<= 32
      28:	77 03 00 00 20 00 00 00	r3 >>= 32
      29:	25 03 01 00 03 00 00 00	if r3 > 3 goto +1 <LBB1_9>
      30:	b7 04 00 00 00 00 00 00	r4 = 0

00000000000000f8 <LBB1_9>:
      31:	67 04 00 00 01 00 00 00	r4 <<= 1
      32:	4f 41 00 00 00 00 00 00	r1 |= r4
      33:	7f 43 00 00 00 00 00 00	r3 >>= r4
      34:	18 02 00 00 fe ff ff ff 00 00 00 00 00 00 00 00	r2 = 4294967294 ll
      36:	5f 23 00 00 00 00 00 00	r3 &= r2
      37:	77 03 00 00 01 00 00 00	r3 >>= 1
      38:	4f 31 00 00 00 00 00 00	r1 |= r3
      39:	07 01 00 00 20 00 00 00	r1 += 32
      40:	05 00 24 00 00 00 00 00	goto +36 <LBB1_19>

0000000000000148 <LBB1_10>:
      41:	67 02 00 00 20 00 00 00	r2 <<= 32
      42:	77 02 00 00 20 00 00 00	r2 >>= 32
      43:	b7 03 00 00 01 00 00 00	r3 = 1
      44:	b7 04 00 00 01 00 00 00	r4 = 1
      45:	25 02 01 00 ff ff 00 00	if r2 > 65535 goto +1 <LBB1_12>
      46:	b7 04 00 00 00 00 00 00	r4 = 0

0000000000000178 <LBB1_12>:
      47:	67 04 00 00 04 00 00 00	r4 <<= 4
      48:	7f 42 00 00 00 00 00 00	r2 >>= r4
      49:	67 02 00 00 20 00 00 00	r2 <<= 32
      50:	77 02 00 00 20 00 00 00	r2 >>= 32
      51:	b7 01 00 00 01 00 00 00	r1 = 1
      52:	25 02 01 00 ff 00 00 00	if r2 > 255 goto +1 <LBB1_14>
      53:	b7 01 00 00 00 00 00 00	r1 = 0

00000000000001b0 <LBB1_14>:
      54:	67 01 00 00 03 00 00 00	r1 <<= 3
      55:	7f 12 00 00 00 00 00 00	r2 >>= r1
      56:	4f 41 00 00 00 00 00 00	r1 |= r4
      57:	67 02 00 00 20 00 00 00	r2 <<= 32
      58:	77 02 00 00 20 00 00 00	r2 >>= 32
      59:	b7 04 00 00 01 00 00 00	r4 = 1
      60:	25 02 01 00 0f 00 00 00	if r2 > 15 goto +1 <LBB1_16>
      61:	b7 04 00 00 00 00 00 00	r4 = 0

00000000000001f0 <LBB1_16>:
      62:	67 04 00 00 02 00 00 00	r4 <<= 2
      63:	4f 41 00 00 00 00 00 00	r1 |= r4
      64:	7f 42 00 00 00 00 00 00	r2 >>= r4
      65:	67 02 00 00 20 00 00 00	r2 <<= 32
      66:	77 02 00 00 20 00 00 00	r2 >>= 32
      67:	25 02 01 00 03 00 00 00	if r2 > 3 goto +1 <LBB1_18>
      68:	b7 03 00 00 00 00 00 00	r3 = 0

0000000000000228 <LBB1_18>:
      69:	67 03 00 00 01 00 00 00	r3 <<= 1
      70:	4f 31 00 00 00 00 00 00	r1 |= r3
      71:	7f 32 00 00 00 00 00 00	r2 >>= r3
      72:	18 03 00 00 fe ff ff ff 00 00 00 00 00 00 00 00	r3 = 4294967294 ll
      74:	5f 32 00 00 00 00 00 00	r2 &= r3
      75:	77 02 00 00 01 00 00 00	r2 >>= 1
      76:	4f 21 00 00 00 00 00 00	r1 |= r2

0000000000000268 <LBB1_19>:
      77:	67 01 00 00 20 00 00 00	r1 <<= 32
      78:	77 01 00 00 20 00 00 00	r1 >>= 32
      79:	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 16) = r1
      80:	85 00 00 00 0e 00 00 00	call 14
      81:	7b 0a e0 ff 00 00 00 00	*(u64 *)(r10 - 32) = r0
      82:	85 00 00 00 0f 00 00 00	call 15
      83:	7b 0a e8 ff 00 00 00 00	*(u64 *)(r10 - 24) = r0
      84:	bf a6 00 00 00 00 00 00	r6 = r10
      85:	07 06 00 00 d0 ff ff ff	r6 += -48
      86:	bf 61 00 00 00 00 00 00	r1 = r6
      87:	b7 02 00 00 10 00 00 00	r2 = 16
      88:	85 00 00 00 10 00 00 00	call 16
      89:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      91:	bf 62 00 00 00 00 00 00	r2 = r6
      92:	85 00 00 00 01 00 00 00	call 1
      93:	15 00 03 00 00 00 00 00	if r0 == 0 goto +3 <LBB1_21>
      94:	b7 01 00 00 01 00 00 00	r1 = 1
      95:	db 10 00 00 00 00 00 00	lock *(u64 *)(r0 + 0) += r1
      96:	05 00 08 00 00 00 00 00	goto +8 <LBB1_22>

0000000000000308 <LBB1_21>:
      97:	bf a2 00 00 00 00 00 00	r2 = r10
      98:	07 02 00 00 d0 ff ff ff	r2 += -48
      99:	bf a3 00 00 00 00 00 00	r3 = r10
     100:	07 03 00 00 f8 ff ff ff	r3 += -8
     101:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
     103:	b7 04 00 00 00 00 00 00	r4 = 0
     104:	85 00 00 00 02 00 00 00	call 2

0000000000000348 <LBB1_22>:
     105:	b7 00 00 00 00 00 00 00	r0 = 0
     106:	95 00 00 00 00 00 00 00	exit
