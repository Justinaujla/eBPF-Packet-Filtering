
./ebpf-samples/all/offwaketime_kern.o:	file format elf64-bpf

Disassembly of section kprobe/try_to_wake_up:

0000000000000000 <waker>:
       0:	bf 17 00 00 00 00 00 00	r7 = r1
       1:	79 73 70 00 00 00 00 00	r3 = *(u64 *)(r7 + 112)
       2:	07 03 00 00 a8 08 00 00	r3 += 2216
       3:	bf a6 00 00 00 00 00 00	r6 = r10
       4:	07 06 00 00 e4 ff ff ff	r6 += -28
       5:	bf 61 00 00 00 00 00 00	r1 = r6
       6:	b7 02 00 00 04 00 00 00	r2 = 4
       7:	85 00 00 00 04 00 00 00	call 4
       8:	bf a8 00 00 00 00 00 00	r8 = r10
       9:	07 08 00 00 e8 ff ff ff	r8 += -24
      10:	bf 81 00 00 00 00 00 00	r1 = r8
      11:	b7 02 00 00 10 00 00 00	r2 = 16
      12:	85 00 00 00 10 00 00 00	call 16
      13:	bf 71 00 00 00 00 00 00	r1 = r7
      14:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
      16:	b7 03 00 00 00 02 00 00	r3 = 512
      17:	85 00 00 00 1b 00 00 00	call 27
      18:	63 0a f8 ff 00 00 00 00	*(u32 *)(r10 - 8) = r0
      19:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      21:	bf 62 00 00 00 00 00 00	r2 = r6
      22:	bf 83 00 00 00 00 00 00	r3 = r8
      23:	b7 04 00 00 00 00 00 00	r4 = 0
      24:	85 00 00 00 02 00 00 00	call 2
      25:	b7 00 00 00 00 00 00 00	r0 = 0
      26:	95 00 00 00 00 00 00 00	exit

Disassembly of section tracepoint/sched/sched_switch:

0000000000000000 <oncpu>:
       0:	bf 17 00 00 00 00 00 00	r7 = r1
       1:	61 71 18 00 00 00 00 00	r1 = *(u32 *)(r7 + 24)
       2:	63 1a c4 ff 00 00 00 00	*(u32 *)(r10 - 60) = r1
       3:	85 00 00 00 05 00 00 00	call 5
       4:	7b 0a b8 ff 00 00 00 00	*(u64 *)(r10 - 72) = r0
       5:	bf a6 00 00 00 00 00 00	r6 = r10
       6:	07 06 00 00 c4 ff ff ff	r6 += -60
       7:	bf a3 00 00 00 00 00 00	r3 = r10
       8:	07 03 00 00 b8 ff ff ff	r3 += -72
       9:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      11:	bf 62 00 00 00 00 00 00	r2 = r6
      12:	b7 04 00 00 00 00 00 00	r4 = 0
      13:	85 00 00 00 02 00 00 00	call 2
      14:	85 00 00 00 0e 00 00 00	call 14
      15:	63 0a c4 ff 00 00 00 00	*(u32 *)(r10 - 60) = r0
      16:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      18:	bf 62 00 00 00 00 00 00	r2 = r6
      19:	85 00 00 00 01 00 00 00	call 1
      20:	bf 08 00 00 00 00 00 00	r8 = r0
      21:	15 08 4b 00 00 00 00 00	if r8 == 0 goto +75 <LBB1_7>
      22:	85 00 00 00 05 00 00 00	call 5
      23:	bf 06 00 00 00 00 00 00	r6 = r0
      24:	79 88 00 00 00 00 00 00	r8 = *(u64 *)(r8 + 0)
      25:	bf a2 00 00 00 00 00 00	r2 = r10
      26:	07 02 00 00 c4 ff ff ff	r2 += -60
      27:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      29:	85 00 00 00 03 00 00 00	call 3
      30:	1f 86 00 00 00 00 00 00	r6 -= r8
      31:	b7 01 00 00 e8 03 00 00	r1 = 1000
      32:	2d 61 40 00 00 00 00 00	if r1 > r6 goto +64 <LBB1_7>
      33:	61 a1 c4 ff 00 00 00 00	r1 = *(u32 *)(r10 - 60)
      34:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
      35:	b7 08 00 00 00 00 00 00	r8 = 0
      36:	7b 8a f0 ff 00 00 00 00	*(u64 *)(r10 - 16) = r8
      37:	7b 8a d0 ff 00 00 00 00	*(u64 *)(r10 - 48) = r8
      38:	7b 8a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r8
      39:	bf a1 00 00 00 00 00 00	r1 = r10
      40:	07 01 00 00 d8 ff ff ff	r1 += -40
      41:	b7 02 00 00 10 00 00 00	r2 = 16
      42:	85 00 00 00 10 00 00 00	call 16
      43:	bf 71 00 00 00 00 00 00	r1 = r7
      44:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
      46:	b7 03 00 00 00 02 00 00	r3 = 512
      47:	85 00 00 00 1b 00 00 00	call 27
      48:	63 0a ec ff 00 00 00 00	*(u32 *)(r10 - 20) = r0
      49:	63 8a e8 ff 00 00 00 00	*(u32 *)(r10 - 24) = r8
      50:	bf a2 00 00 00 00 00 00	r2 = r10
      51:	07 02 00 00 fc ff ff ff	r2 += -4
      52:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      54:	85 00 00 00 01 00 00 00	call 1
      55:	15 00 11 00 00 00 00 00	if r0 == 0 goto +17 <LBB1_4>
      56:	61 01 10 00 00 00 00 00	r1 = *(u32 *)(r0 + 16)
      57:	63 1a e8 ff 00 00 00 00	*(u32 *)(r10 - 24) = r1
      58:	61 01 0c 00 00 00 00 00	r1 = *(u32 *)(r0 + 12)
      59:	67 01 00 00 20 00 00 00	r1 <<= 32
      60:	61 02 08 00 00 00 00 00	r2 = *(u32 *)(r0 + 8)
      61:	4f 21 00 00 00 00 00 00	r1 |= r2
      62:	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 48) = r1
      63:	61 01 00 00 00 00 00 00	r1 = *(u32 *)(r0 + 0)
      64:	61 02 04 00 00 00 00 00	r2 = *(u32 *)(r0 + 4)
      65:	67 02 00 00 20 00 00 00	r2 <<= 32
      66:	4f 12 00 00 00 00 00 00	r2 |= r1
      67:	7b 2a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r2
      68:	bf a2 00 00 00 00 00 00	r2 = r10
      69:	07 02 00 00 fc ff ff ff	r2 += -4
      70:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      72:	85 00 00 00 03 00 00 00	call 3

0000000000000248 <LBB1_4>:
      73:	bf a2 00 00 00 00 00 00	r2 = r10
      74:	07 02 00 00 c8 ff ff ff	r2 += -56
      75:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      77:	85 00 00 00 01 00 00 00	call 1
      78:	55 00 0e 00 00 00 00 00	if r0 != 0 goto +14 <LBB1_6>
      79:	bf a7 00 00 00 00 00 00	r7 = r10
      80:	07 07 00 00 c8 ff ff ff	r7 += -56
      81:	bf a3 00 00 00 00 00 00	r3 = r10
      82:	07 03 00 00 f0 ff ff ff	r3 += -16
      83:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      85:	bf 72 00 00 00 00 00 00	r2 = r7
      86:	b7 04 00 00 01 00 00 00	r4 = 1
      87:	85 00 00 00 02 00 00 00	call 2
      88:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      90:	bf 72 00 00 00 00 00 00	r2 = r7
      91:	85 00 00 00 01 00 00 00	call 1
      92:	15 00 04 00 00 00 00 00	if r0 == 0 goto +4 <LBB1_7>

00000000000002e8 <LBB1_6>:
      93:	37 06 00 00 e8 03 00 00	r6 /= 1000
      94:	79 01 00 00 00 00 00 00	r1 = *(u64 *)(r0 + 0)
      95:	0f 61 00 00 00 00 00 00	r1 += r6
      96:	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0) = r1

0000000000000308 <LBB1_7>:
      97:	b7 00 00 00 00 00 00 00	r0 = 0
      98:	95 00 00 00 00 00 00 00	exit
