
./ebpf-samples/all/bpf_xdp.o:	file format elf64-bpf

Disassembly of section from-netdev:

0000000000000000 <xdp_start>:
       0:	b7 06 00 00 01 00 00 00	r6 = 1
       1:	61 12 04 00 00 00 00 00	r2 = *(u32 *)(r1 + 4)
       2:	61 17 00 00 00 00 00 00	r7 = *(u32 *)(r1 + 0)
       3:	bf 71 00 00 00 00 00 00	r1 = r7
       4:	07 01 00 00 0e 00 00 00	r1 += 14
       5:	2d 21 71 00 00 00 00 00	if r1 > r2 goto +113 <LBB0_11>
       6:	71 73 0c 00 00 00 00 00	r3 = *(u8 *)(r7 + 12)
       7:	71 71 0d 00 00 00 00 00	r1 = *(u8 *)(r7 + 13)
       8:	67 01 00 00 08 00 00 00	r1 <<= 8
       9:	4f 31 00 00 00 00 00 00	r1 |= r3
      10:	15 01 20 00 86 dd 00 00	if r1 == 56710 goto +32 <LBB0_7>
      11:	b7 06 00 00 02 00 00 00	r6 = 2
      12:	55 01 6a 00 08 00 00 00	if r1 != 8 goto +106 <LBB0_11>
      13:	b7 06 00 00 01 00 00 00	r6 = 1
      14:	bf 71 00 00 00 00 00 00	r1 = r7
      15:	07 01 00 00 22 00 00 00	r1 += 34
      16:	2d 21 66 00 00 00 00 00	if r1 > r2 goto +102 <LBB0_11>
      17:	61 71 1a 00 00 00 00 00	r1 = *(u32 *)(r7 + 26)
      18:	b7 02 00 00 20 00 00 00	r2 = 32
      19:	63 2a d0 ff 00 00 00 00	*(u32 *)(r10 - 48) = r2
      20:	63 1a d4 ff 00 00 00 00	*(u32 *)(r10 - 44) = r1
      21:	bf a2 00 00 00 00 00 00	r2 = r10
      22:	07 02 00 00 d0 ff ff ff	r2 += -48
      23:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      25:	85 00 00 00 01 00 00 00	call 1
      26:	55 00 5c 00 00 00 00 00	if r0 != 0 goto +92 <LBB0_11>
      27:	b7 01 00 00 00 00 00 00	r1 = 0
      28:	63 1a f8 ff 00 00 00 00	*(u32 *)(r10 - 8) = r1
      29:	63 1a f4 ff 00 00 00 00	*(u32 *)(r10 - 12) = r1
      30:	63 1a f0 ff 00 00 00 00	*(u32 *)(r10 - 16) = r1
      31:	63 1a ec ff 00 00 00 00	*(u32 *)(r10 - 20) = r1
      32:	61 71 1e 00 00 00 00 00	r1 = *(u32 *)(r7 + 30)
      33:	63 1a e8 ff 00 00 00 00	*(u32 *)(r10 - 24) = r1
      34:	b7 06 00 00 01 00 00 00	r6 = 1
      35:	73 6a f8 ff 00 00 00 00	*(u8 *)(r10 - 8) = r6
      36:	bf a2 00 00 00 00 00 00	r2 = r10
      37:	07 02 00 00 e8 ff ff ff	r2 += -24
      38:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      40:	85 00 00 00 01 00 00 00	call 1
      41:	15 00 4d 00 00 00 00 00	if r0 == 0 goto +77 <LBB0_11>
      42:	05 00 4b 00 00 00 00 00	goto +75 <LBB0_10>

0000000000000158 <LBB0_7>:
      43:	b7 06 00 00 01 00 00 00	r6 = 1
      44:	bf 71 00 00 00 00 00 00	r1 = r7
      45:	07 01 00 00 36 00 00 00	r1 += 54
      46:	2d 21 48 00 00 00 00 00	if r1 > r2 goto +72 <LBB0_11>
      47:	61 71 22 00 00 00 00 00	r1 = *(u32 *)(r7 + 34)
      48:	63 1a e0 ff 00 00 00 00	*(u32 *)(r10 - 32) = r1
      49:	61 71 1e 00 00 00 00 00	r1 = *(u32 *)(r7 + 30)
      50:	63 1a dc ff 00 00 00 00	*(u32 *)(r10 - 36) = r1
      51:	61 71 1a 00 00 00 00 00	r1 = *(u32 *)(r7 + 26)
      52:	63 1a d8 ff 00 00 00 00	*(u32 *)(r10 - 40) = r1
      53:	61 71 16 00 00 00 00 00	r1 = *(u32 *)(r7 + 22)
      54:	63 1a d4 ff 00 00 00 00	*(u32 *)(r10 - 44) = r1
      55:	b7 01 00 00 80 00 00 00	r1 = 128
      56:	63 1a d0 ff 00 00 00 00	*(u32 *)(r10 - 48) = r1
      57:	bf a2 00 00 00 00 00 00	r2 = r10
      58:	07 02 00 00 d0 ff ff ff	r2 += -48
      59:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      61:	85 00 00 00 01 00 00 00	call 1
      62:	55 00 38 00 00 00 00 00	if r0 != 0 goto +56 <LBB0_11>
      63:	b7 01 00 00 02 00 00 00	r1 = 2
      64:	63 1a f8 ff 00 00 00 00	*(u32 *)(r10 - 8) = r1
      65:	71 72 2f 00 00 00 00 00	r2 = *(u8 *)(r7 + 47)
      66:	67 02 00 00 08 00 00 00	r2 <<= 8
      67:	71 71 2e 00 00 00 00 00	r1 = *(u8 *)(r7 + 46)
      68:	4f 12 00 00 00 00 00 00	r2 |= r1
      69:	71 71 31 00 00 00 00 00	r1 = *(u8 *)(r7 + 49)
      70:	67 01 00 00 08 00 00 00	r1 <<= 8
      71:	71 73 30 00 00 00 00 00	r3 = *(u8 *)(r7 + 48)
      72:	4f 31 00 00 00 00 00 00	r1 |= r3
      73:	67 01 00 00 10 00 00 00	r1 <<= 16
      74:	4f 21 00 00 00 00 00 00	r1 |= r2
      75:	71 73 33 00 00 00 00 00	r3 = *(u8 *)(r7 + 51)
      76:	67 03 00 00 08 00 00 00	r3 <<= 8
      77:	71 72 32 00 00 00 00 00	r2 = *(u8 *)(r7 + 50)
      78:	4f 23 00 00 00 00 00 00	r3 |= r2
      79:	71 72 35 00 00 00 00 00	r2 = *(u8 *)(r7 + 53)
      80:	67 02 00 00 08 00 00 00	r2 <<= 8
      81:	71 74 34 00 00 00 00 00	r4 = *(u8 *)(r7 + 52)
      82:	4f 42 00 00 00 00 00 00	r2 |= r4
      83:	67 02 00 00 10 00 00 00	r2 <<= 16
      84:	4f 32 00 00 00 00 00 00	r2 |= r3
      85:	67 02 00 00 20 00 00 00	r2 <<= 32
      86:	4f 12 00 00 00 00 00 00	r2 |= r1
      87:	71 73 27 00 00 00 00 00	r3 = *(u8 *)(r7 + 39)
      88:	67 03 00 00 08 00 00 00	r3 <<= 8
      89:	71 71 26 00 00 00 00 00	r1 = *(u8 *)(r7 + 38)
      90:	4f 13 00 00 00 00 00 00	r3 |= r1
      91:	71 71 29 00 00 00 00 00	r1 = *(u8 *)(r7 + 41)
      92:	67 01 00 00 08 00 00 00	r1 <<= 8
      93:	71 74 28 00 00 00 00 00	r4 = *(u8 *)(r7 + 40)
      94:	4f 41 00 00 00 00 00 00	r1 |= r4
      95:	7b 2a f0 ff 00 00 00 00	*(u64 *)(r10 - 16) = r2
      96:	67 01 00 00 10 00 00 00	r1 <<= 16
      97:	4f 31 00 00 00 00 00 00	r1 |= r3
      98:	71 72 2b 00 00 00 00 00	r2 = *(u8 *)(r7 + 43)
      99:	67 02 00 00 08 00 00 00	r2 <<= 8
     100:	71 73 2a 00 00 00 00 00	r3 = *(u8 *)(r7 + 42)
     101:	4f 32 00 00 00 00 00 00	r2 |= r3
     102:	71 73 2c 00 00 00 00 00	r3 = *(u8 *)(r7 + 44)
     103:	71 74 2d 00 00 00 00 00	r4 = *(u8 *)(r7 + 45)
     104:	67 04 00 00 08 00 00 00	r4 <<= 8
     105:	4f 34 00 00 00 00 00 00	r4 |= r3
     106:	67 04 00 00 10 00 00 00	r4 <<= 16
     107:	4f 24 00 00 00 00 00 00	r4 |= r2
     108:	67 04 00 00 20 00 00 00	r4 <<= 32
     109:	4f 14 00 00 00 00 00 00	r4 |= r1
     110:	7b 4a e8 ff 00 00 00 00	*(u64 *)(r10 - 24) = r4
     111:	bf a2 00 00 00 00 00 00	r2 = r10
     112:	07 02 00 00 e8 ff ff ff	r2 += -24
     113:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
     115:	85 00 00 00 01 00 00 00	call 1
     116:	b7 06 00 00 01 00 00 00	r6 = 1
     117:	15 00 01 00 00 00 00 00	if r0 == 0 goto +1 <LBB0_11>

00000000000003b0 <LBB0_10>:
     118:	b7 06 00 00 02 00 00 00	r6 = 2

00000000000003b8 <LBB0_11>:
     119:	bf 60 00 00 00 00 00 00	r0 = r6
     120:	95 00 00 00 00 00 00 00	exit
