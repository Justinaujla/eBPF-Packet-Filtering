
./ebpf-samples/all/lathist_kern.o:	file format elf64-bpf

Disassembly of section kprobe/trace_preempt_off:

0000000000000000 <bpf_prog1>:
       0:	85 00 00 00 08 00 00 00	call 8
       1:	63 0a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r0
       2:	bf a2 00 00 00 00 00 00	r2 = r10
       3:	07 02 00 00 fc ff ff ff	r2 += -4
       4:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
       6:	85 00 00 00 01 00 00 00	call 1
       7:	bf 06 00 00 00 00 00 00	r6 = r0
       8:	15 06 02 00 00 00 00 00	if r6 == 0 goto +2 <LBB0_2>
       9:	85 00 00 00 05 00 00 00	call 5
      10:	7b 06 00 00 00 00 00 00	*(u64 *)(r6 + 0) = r0

0000000000000058 <LBB0_2>:
      11:	b7 00 00 00 00 00 00 00	r0 = 0
      12:	95 00 00 00 00 00 00 00	exit

Disassembly of section kprobe/trace_preempt_on:

0000000000000000 <bpf_prog2>:
       0:	85 00 00 00 08 00 00 00	call 8
       1:	63 0a f8 ff 00 00 00 00	*(u32 *)(r10 - 8) = r0
       2:	bf a2 00 00 00 00 00 00	r2 = r10
       3:	07 02 00 00 f8 ff ff ff	r2 += -8
       4:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
       6:	85 00 00 00 01 00 00 00	call 1
       7:	bf 06 00 00 00 00 00 00	r6 = r0
       8:	15 06 60 00 00 00 00 00	if r6 == 0 goto +96 <LBB1_24>
       9:	85 00 00 00 05 00 00 00	call 5
      10:	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0)
      11:	1f 10 00 00 00 00 00 00	r0 -= r1
      12:	bf 02 00 00 00 00 00 00	r2 = r0
      13:	77 02 00 00 20 00 00 00	r2 >>= 32
      14:	15 02 24 00 00 00 00 00	if r2 == 0 goto +36 <LBB1_11>
      15:	b7 03 00 00 01 00 00 00	r3 = 1
      16:	b7 04 00 00 01 00 00 00	r4 = 1
      17:	25 02 01 00 ff ff 00 00	if r2 > 65535 goto +1 <LBB1_4>
      18:	b7 04 00 00 00 00 00 00	r4 = 0

0000000000000098 <LBB1_4>:
      19:	67 04 00 00 04 00 00 00	r4 <<= 4
      20:	7f 42 00 00 00 00 00 00	r2 >>= r4
      21:	67 02 00 00 20 00 00 00	r2 <<= 32
      22:	77 02 00 00 20 00 00 00	r2 >>= 32
      23:	b7 01 00 00 01 00 00 00	r1 = 1
      24:	25 02 01 00 ff 00 00 00	if r2 > 255 goto +1 <LBB1_6>
      25:	b7 01 00 00 00 00 00 00	r1 = 0

00000000000000d0 <LBB1_6>:
      26:	67 01 00 00 03 00 00 00	r1 <<= 3
      27:	7f 12 00 00 00 00 00 00	r2 >>= r1
      28:	4f 41 00 00 00 00 00 00	r1 |= r4
      29:	67 02 00 00 20 00 00 00	r2 <<= 32
      30:	77 02 00 00 20 00 00 00	r2 >>= 32
      31:	b7 04 00 00 01 00 00 00	r4 = 1
      32:	25 02 01 00 0f 00 00 00	if r2 > 15 goto +1 <LBB1_8>
      33:	b7 04 00 00 00 00 00 00	r4 = 0

0000000000000110 <LBB1_8>:
      34:	67 04 00 00 02 00 00 00	r4 <<= 2
      35:	4f 41 00 00 00 00 00 00	r1 |= r4
      36:	7f 42 00 00 00 00 00 00	r2 >>= r4
      37:	67 02 00 00 20 00 00 00	r2 <<= 32
      38:	77 02 00 00 20 00 00 00	r2 >>= 32
      39:	25 02 01 00 03 00 00 00	if r2 > 3 goto +1 <LBB1_10>
      40:	b7 03 00 00 00 00 00 00	r3 = 0

0000000000000148 <LBB1_10>:
      41:	67 03 00 00 01 00 00 00	r3 <<= 1
      42:	4f 31 00 00 00 00 00 00	r1 |= r3
      43:	7f 32 00 00 00 00 00 00	r2 >>= r3
      44:	18 03 00 00 fe ff ff ff 00 00 00 00 00 00 00 00	r3 = 4294967294 ll
      46:	5f 32 00 00 00 00 00 00	r2 &= r3
      47:	77 02 00 00 01 00 00 00	r2 >>= 1
      48:	4f 21 00 00 00 00 00 00	r1 |= r2
      49:	07 01 00 00 20 00 00 00	r1 += 32
      50:	05 00 24 00 00 00 00 00	goto +36 <LBB1_20>

0000000000000198 <LBB1_11>:
      51:	67 00 00 00 20 00 00 00	r0 <<= 32
      52:	77 00 00 00 20 00 00 00	r0 >>= 32
      53:	b7 02 00 00 01 00 00 00	r2 = 1
      54:	b7 03 00 00 01 00 00 00	r3 = 1
      55:	25 00 01 00 ff ff 00 00	if r0 > 65535 goto +1 <LBB1_13>
      56:	b7 03 00 00 00 00 00 00	r3 = 0

00000000000001c8 <LBB1_13>:
      57:	67 03 00 00 04 00 00 00	r3 <<= 4
      58:	7f 30 00 00 00 00 00 00	r0 >>= r3
      59:	67 00 00 00 20 00 00 00	r0 <<= 32
      60:	77 00 00 00 20 00 00 00	r0 >>= 32
      61:	b7 01 00 00 01 00 00 00	r1 = 1
      62:	25 00 01 00 ff 00 00 00	if r0 > 255 goto +1 <LBB1_15>
      63:	b7 01 00 00 00 00 00 00	r1 = 0

0000000000000200 <LBB1_15>:
      64:	67 01 00 00 03 00 00 00	r1 <<= 3
      65:	7f 10 00 00 00 00 00 00	r0 >>= r1
      66:	4f 31 00 00 00 00 00 00	r1 |= r3
      67:	67 00 00 00 20 00 00 00	r0 <<= 32
      68:	77 00 00 00 20 00 00 00	r0 >>= 32
      69:	b7 03 00 00 01 00 00 00	r3 = 1
      70:	25 00 01 00 0f 00 00 00	if r0 > 15 goto +1 <LBB1_17>
      71:	b7 03 00 00 00 00 00 00	r3 = 0

0000000000000240 <LBB1_17>:
      72:	67 03 00 00 02 00 00 00	r3 <<= 2
      73:	4f 31 00 00 00 00 00 00	r1 |= r3
      74:	7f 30 00 00 00 00 00 00	r0 >>= r3
      75:	67 00 00 00 20 00 00 00	r0 <<= 32
      76:	77 00 00 00 20 00 00 00	r0 >>= 32
      77:	25 00 01 00 03 00 00 00	if r0 > 3 goto +1 <LBB1_19>
      78:	b7 02 00 00 00 00 00 00	r2 = 0

0000000000000278 <LBB1_19>:
      79:	67 02 00 00 01 00 00 00	r2 <<= 1
      80:	4f 21 00 00 00 00 00 00	r1 |= r2
      81:	7f 20 00 00 00 00 00 00	r0 >>= r2
      82:	18 02 00 00 fe ff ff ff 00 00 00 00 00 00 00 00	r2 = 4294967294 ll
      84:	5f 20 00 00 00 00 00 00	r0 &= r2
      85:	77 00 00 00 01 00 00 00	r0 >>= 1
      86:	4f 01 00 00 00 00 00 00	r1 |= r0

00000000000002b8 <LBB1_20>:
      87:	bf 12 00 00 00 00 00 00	r2 = r1
      88:	67 02 00 00 20 00 00 00	r2 <<= 32
      89:	77 02 00 00 20 00 00 00	r2 >>= 32
      90:	b7 03 00 00 13 00 00 00	r3 = 19
      91:	2d 23 01 00 00 00 00 00	if r3 > r2 goto +1 <LBB1_22>
      92:	b7 01 00 00 13 00 00 00	r1 = 19

00000000000002e8 <LBB1_22>:
      93:	61 a2 f8 ff 00 00 00 00	r2 = *(u32 *)(r10 - 8)
      94:	27 02 00 00 14 00 00 00	r2 *= 20
      95:	0f 21 00 00 00 00 00 00	r1 += r2
      96:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
      97:	bf a2 00 00 00 00 00 00	r2 = r10
      98:	07 02 00 00 fc ff ff ff	r2 += -4
      99:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
     101:	85 00 00 00 01 00 00 00	call 1
     102:	15 00 02 00 00 00 00 00	if r0 == 0 goto +2 <LBB1_24>
     103:	b7 01 00 00 01 00 00 00	r1 = 1
     104:	db 10 00 00 00 00 00 00	lock *(u64 *)(r0 + 0) += r1

0000000000000348 <LBB1_24>:
     105:	b7 00 00 00 00 00 00 00	r0 = 0
     106:	95 00 00 00 00 00 00 00	exit
