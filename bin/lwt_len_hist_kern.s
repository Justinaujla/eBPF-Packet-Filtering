
./ebpf-samples/all/lwt_len_hist_kern.o:	file format elf64-bpf

Disassembly of section len_hist:

0000000000000000 <do_len_hist>:
       0:	b7 02 00 00 01 00 00 00	r2 = 1
       1:	7b 2a f0 ff 00 00 00 00	*(u64 *)(r10 - 16) = r2
       2:	61 11 00 00 00 00 00 00	r1 = *(u32 *)(r1 + 0)
       3:	b7 04 00 00 01 00 00 00	r4 = 1
       4:	25 01 01 00 ff ff 00 00	if r1 > 65535 goto +1 <LBB0_2>
       5:	b7 04 00 00 00 00 00 00	r4 = 0

0000000000000030 <LBB0_2>:
       6:	67 04 00 00 04 00 00 00	r4 <<= 4
       7:	7f 41 00 00 00 00 00 00	r1 >>= r4
       8:	67 01 00 00 20 00 00 00	r1 <<= 32
       9:	77 01 00 00 20 00 00 00	r1 >>= 32
      10:	b7 03 00 00 01 00 00 00	r3 = 1
      11:	25 01 01 00 ff 00 00 00	if r1 > 255 goto +1 <LBB0_4>
      12:	b7 03 00 00 00 00 00 00	r3 = 0

0000000000000068 <LBB0_4>:
      13:	67 03 00 00 03 00 00 00	r3 <<= 3
      14:	7f 31 00 00 00 00 00 00	r1 >>= r3
      15:	4f 43 00 00 00 00 00 00	r3 |= r4
      16:	67 01 00 00 20 00 00 00	r1 <<= 32
      17:	77 01 00 00 20 00 00 00	r1 >>= 32
      18:	b7 04 00 00 01 00 00 00	r4 = 1
      19:	25 01 01 00 0f 00 00 00	if r1 > 15 goto +1 <LBB0_6>
      20:	b7 04 00 00 00 00 00 00	r4 = 0

00000000000000a8 <LBB0_6>:
      21:	67 04 00 00 02 00 00 00	r4 <<= 2
      22:	4f 43 00 00 00 00 00 00	r3 |= r4
      23:	7f 41 00 00 00 00 00 00	r1 >>= r4
      24:	67 01 00 00 20 00 00 00	r1 <<= 32
      25:	77 01 00 00 20 00 00 00	r1 >>= 32
      26:	25 01 01 00 03 00 00 00	if r1 > 3 goto +1 <LBB0_8>
      27:	b7 02 00 00 00 00 00 00	r2 = 0

00000000000000e0 <LBB0_8>:
      28:	67 02 00 00 01 00 00 00	r2 <<= 1
      29:	4f 23 00 00 00 00 00 00	r3 |= r2
      30:	7f 21 00 00 00 00 00 00	r1 >>= r2
      31:	18 02 00 00 fe ff ff ff 00 00 00 00 00 00 00 00	r2 = 4294967294 ll
      33:	5f 21 00 00 00 00 00 00	r1 &= r2
      34:	77 01 00 00 01 00 00 00	r1 >>= 1
      35:	4f 13 00 00 00 00 00 00	r3 |= r1
      36:	7b 3a f8 ff 00 00 00 00	*(u64 *)(r10 - 8) = r3
      37:	bf a2 00 00 00 00 00 00	r2 = r10
      38:	07 02 00 00 f8 ff ff ff	r2 += -8
      39:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      41:	85 00 00 00 01 00 00 00	call 1
      42:	15 00 03 00 00 00 00 00	if r0 == 0 goto +3 <LBB0_10>
      43:	b7 01 00 00 01 00 00 00	r1 = 1
      44:	db 10 00 00 00 00 00 00	lock *(u64 *)(r0 + 0) += r1
      45:	05 00 08 00 00 00 00 00	goto +8 <LBB0_11>

0000000000000170 <LBB0_10>:
      46:	bf a2 00 00 00 00 00 00	r2 = r10
      47:	07 02 00 00 f8 ff ff ff	r2 += -8
      48:	bf a3 00 00 00 00 00 00	r3 = r10
      49:	07 03 00 00 f0 ff ff ff	r3 += -16
      50:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      52:	b7 04 00 00 00 00 00 00	r4 = 0
      53:	85 00 00 00 02 00 00 00	call 2

00000000000001b0 <LBB0_11>:
      54:	b7 00 00 00 00 00 00 00	r0 = 0
      55:	95 00 00 00 00 00 00 00	exit
