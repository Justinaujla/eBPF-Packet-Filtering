
./ebpf-samples/all/xdp_redirect_err_kern.o:	file format elf64-bpf

Disassembly of section xdp_redirect_map:

0000000000000000 <xdp_redirect_map_prog>:
       0:	61 12 04 00 00 00 00 00	r2 = *(u32 *)(r1 + 4)
       1:	61 16 00 00 00 00 00 00	r6 = *(u32 *)(r1 + 0)
       2:	b7 01 00 00 00 00 00 00	r1 = 0
       3:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
       4:	b7 00 00 00 01 00 00 00	r0 = 1
       5:	bf 61 00 00 00 00 00 00	r1 = r6
       6:	07 01 00 00 0e 00 00 00	r1 += 14
       7:	2d 21 16 00 00 00 00 00	if r1 > r2 goto +22 <LBB0_4>
       8:	bf a2 00 00 00 00 00 00	r2 = r10
       9:	07 02 00 00 fc ff ff ff	r2 += -4
      10:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      12:	85 00 00 00 01 00 00 00	call 1
      13:	15 00 03 00 00 00 00 00	if r0 == 0 goto +3 <LBB0_3>
      14:	79 01 00 00 00 00 00 00	r1 = *(u64 *)(r0 + 0)
      15:	07 01 00 00 01 00 00 00	r1 += 1
      16:	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0) = r1

0000000000000088 <LBB0_3>:
      17:	69 61 00 00 00 00 00 00	r1 = *(u16 *)(r6 + 0)
      18:	69 62 06 00 00 00 00 00	r2 = *(u16 *)(r6 + 6)
      19:	6b 26 00 00 00 00 00 00	*(u16 *)(r6 + 0) = r2
      20:	69 62 08 00 00 00 00 00	r2 = *(u16 *)(r6 + 8)
      21:	69 63 02 00 00 00 00 00	r3 = *(u16 *)(r6 + 2)
      22:	6b 36 08 00 00 00 00 00	*(u16 *)(r6 + 8) = r3
      23:	6b 26 02 00 00 00 00 00	*(u16 *)(r6 + 2) = r2
      24:	69 62 0a 00 00 00 00 00	r2 = *(u16 *)(r6 + 10)
      25:	69 63 04 00 00 00 00 00	r3 = *(u16 *)(r6 + 4)
      26:	6b 36 0a 00 00 00 00 00	*(u16 *)(r6 + 10) = r3
      27:	6b 26 04 00 00 00 00 00	*(u16 *)(r6 + 4) = r2
      28:	6b 16 06 00 00 00 00 00	*(u16 *)(r6 + 6) = r1
      29:	b7 00 00 00 04 00 00 00	r0 = 4

00000000000000f0 <LBB0_4>:
      30:	95 00 00 00 00 00 00 00	exit

Disassembly of section xdp_redirect_dummy:

0000000000000000 <xdp_redirect_dummy_prog>:
       0:	b7 00 00 00 02 00 00 00	r0 = 2
       1:	95 00 00 00 00 00 00 00	exit

Disassembly of section xdp_redirect_map_rr:

0000000000000000 <xdp_prog_redirect_map_rr>:
       0:	b7 06 00 00 00 00 00 00	r6 = 0
       1:	63 6a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r6
       2:	bf a2 00 00 00 00 00 00	r2 = r10
       3:	07 02 00 00 fc ff ff ff	r2 += -4
       4:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
       6:	85 00 00 00 01 00 00 00	call 1
       7:	15 00 0f 00 00 00 00 00	if r0 == 0 goto +15 <LBB2_2>
       8:	79 06 00 00 00 00 00 00	r6 = *(u64 *)(r0 + 0)
       9:	07 06 00 00 01 00 00 00	r6 += 1
      10:	7b 60 00 00 00 00 00 00	*(u64 *)(r0 + 0) = r6
      11:	bf 61 00 00 00 00 00 00	r1 = r6
      12:	77 01 00 00 3f 00 00 00	r1 >>= 63
      13:	bf 62 00 00 00 00 00 00	r2 = r6
      14:	0f 12 00 00 00 00 00 00	r2 += r1
      15:	18 01 00 00 fe ff ff ff 00 00 00 00 00 00 00 00	r1 = 4294967294 ll
      17:	5f 12 00 00 00 00 00 00	r2 &= r1
      18:	1f 26 00 00 00 00 00 00	r6 -= r2
      19:	b7 00 00 00 00 00 00 00	r0 = 0
      20:	67 06 00 00 20 00 00 00	r6 <<= 32
      21:	c7 06 00 00 20 00 00 00	r6 s>>= 32
      22:	65 06 05 00 09 00 00 00	if r6 s> 9 goto +5 <LBB2_3>

00000000000000b8 <LBB2_2>:
      23:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      25:	bf 62 00 00 00 00 00 00	r2 = r6
      26:	b7 03 00 00 00 00 00 00	r3 = 0
      27:	85 00 00 00 33 00 00 00	call 51

00000000000000e0 <LBB2_3>:
      28:	95 00 00 00 00 00 00 00	exit
