
./ebpf-samples/all/tracex6_kern.o:	file format elf64-bpf

Disassembly of section kprobe/htab_map_get_next_key:

0000000000000000 <bpf_prog1>:
       0:	85 00 00 00 08 00 00 00	call 8
       1:	63 0a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r0
       2:	67 00 00 00 20 00 00 00	r0 <<= 32
       3:	77 00 00 00 20 00 00 00	r0 >>= 32
       4:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
       6:	bf 02 00 00 00 00 00 00	r2 = r0
       7:	85 00 00 00 16 00 00 00	call 22
       8:	bf 06 00 00 00 00 00 00	r6 = r0
       9:	7b 6a f0 ff 00 00 00 00	*(u64 *)(r10 - 16) = r6
      10:	bf 61 00 00 00 00 00 00	r1 = r6
      11:	07 01 00 00 16 00 00 00	r1 += 22
      12:	b7 02 00 00 15 00 00 00	r2 = 21
      13:	2d 12 10 00 00 00 00 00	if r2 > r1 goto +16 <LBB0_4>
      14:	bf a2 00 00 00 00 00 00	r2 = r10
      15:	07 02 00 00 fc ff ff ff	r2 += -4
      16:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      18:	85 00 00 00 01 00 00 00	call 1
      19:	15 00 02 00 00 00 00 00	if r0 == 0 goto +2 <LBB0_3>
      20:	7b 60 00 00 00 00 00 00	*(u64 *)(r0 + 0) = r6
      21:	05 00 08 00 00 00 00 00	goto +8 <LBB0_4>

00000000000000b0 <LBB0_3>:
      22:	bf a2 00 00 00 00 00 00	r2 = r10
      23:	07 02 00 00 fc ff ff ff	r2 += -4
      24:	bf a3 00 00 00 00 00 00	r3 = r10
      25:	07 03 00 00 f0 ff ff ff	r3 += -16
      26:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      28:	b7 04 00 00 01 00 00 00	r4 = 1
      29:	85 00 00 00 02 00 00 00	call 2

00000000000000f0 <LBB0_4>:
      30:	b7 00 00 00 00 00 00 00	r0 = 0
      31:	95 00 00 00 00 00 00 00	exit

Disassembly of section kprobe/htab_map_lookup_elem:

0000000000000000 <bpf_prog2>:
       0:	85 00 00 00 08 00 00 00	call 8
       1:	63 0a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r0
       2:	67 00 00 00 20 00 00 00	r0 <<= 32
       3:	77 00 00 00 20 00 00 00	r0 >>= 32
       4:	bf a3 00 00 00 00 00 00	r3 = r10
       5:	07 03 00 00 e0 ff ff ff	r3 += -32
       6:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
       8:	bf 02 00 00 00 00 00 00	r2 = r0
       9:	b7 04 00 00 18 00 00 00	r4 = 24
      10:	85 00 00 00 37 00 00 00	call 55
      11:	67 00 00 00 20 00 00 00	r0 <<= 32
      12:	77 00 00 00 20 00 00 00	r0 >>= 32
      13:	55 00 15 00 00 00 00 00	if r0 != 0 goto +21 <LBB1_4>
      14:	bf a2 00 00 00 00 00 00	r2 = r10
      15:	07 02 00 00 fc ff ff ff	r2 += -4
      16:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      18:	85 00 00 00 01 00 00 00	call 1
      19:	15 00 07 00 00 00 00 00	if r0 == 0 goto +7 <LBB1_3>
      20:	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 16)
      21:	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 16) = r1
      22:	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 24)
      23:	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 8) = r1
      24:	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 32)
      25:	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0) = r1
      26:	05 00 08 00 00 00 00 00	goto +8 <LBB1_4>

00000000000000d8 <LBB1_3>:
      27:	bf a2 00 00 00 00 00 00	r2 = r10
      28:	07 02 00 00 fc ff ff ff	r2 += -4
      29:	bf a3 00 00 00 00 00 00	r3 = r10
      30:	07 03 00 00 e0 ff ff ff	r3 += -32
      31:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      33:	b7 04 00 00 01 00 00 00	r4 = 1
      34:	85 00 00 00 02 00 00 00	call 2

0000000000000118 <LBB1_4>:
      35:	b7 00 00 00 00 00 00 00	r0 = 0
      36:	95 00 00 00 00 00 00 00	exit
